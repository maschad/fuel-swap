/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.89.1
  Forc version: 0.60.0
  Fuel-Core version: 0.27.0
*/

import { Interface, Contract, ContractFactory } from "fuels";
import type { Provider, Account, AbstractAddress, BytesLike, DeployContractOptions, StorageSlot } from "fuels";
import type { AtomicAddLiquidityAbi, AtomicAddLiquidityAbiInterface } from "../AtomicAddLiquidityAbi";

const _abi = {
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "()",
      "components": [],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "b256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "enum InputError",
      "components": [
        {
          "name": "DesiredLiquidityZero",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 3,
      "type": "struct Asset",
      "components": [
        {
          "name": "id",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "amount",
          "type": 8,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "struct AssetId",
      "components": [
        {
          "name": "bits",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 5,
      "type": "struct AssetPair",
      "components": [
        {
          "name": "a",
          "type": 3,
          "typeArguments": null
        },
        {
          "name": "b",
          "type": 3,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 6,
      "type": "struct ContractId",
      "components": [
        {
          "name": "bits",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 7,
      "type": "struct LiquidityParameters",
      "components": [
        {
          "name": "deposits",
          "type": 5,
          "typeArguments": null
        },
        {
          "name": "liquidity",
          "type": 8,
          "typeArguments": null
        },
        {
          "name": "deadline",
          "type": 8,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 8,
      "type": "u64",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "exchange_contract_id",
          "type": 6,
          "typeArguments": null
        },
        {
          "name": "liquidity_parameters",
          "type": 7,
          "typeArguments": null
        }
      ],
      "name": "main",
      "output": {
        "name": "",
        "type": 8,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Deposits pool assets and adds liquidity to an AMM exchange contract."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `exchange_contract_id`: [ContractId] - The contract id of the exchange."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `liquidity_parameters`: [LiquidityParameters] - Exchange liquidity for a specific asset pair."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Returns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * The amount of liquidity assets minted."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When `liquidity_parameters.liquidity` is not greater than zero."
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "17871718070013141034",
      "loggedType": {
        "name": "",
        "type": 2,
        "typeArguments": []
      }
    }
  ],
  "messagesTypes": [],
  "configurables": []
};

const _storageSlots: StorageSlot[] = [];

export const AtomicAddLiquidityAbi__factory = {
  abi: _abi,

  storageSlots: _storageSlots,

  createInterface(): AtomicAddLiquidityAbiInterface {
    return new Interface(_abi) as unknown as AtomicAddLiquidityAbiInterface
  },

  connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ): AtomicAddLiquidityAbi {
    return new Contract(id, _abi, accountOrProvider) as unknown as AtomicAddLiquidityAbi
  },

  async deployContract(
    bytecode: BytesLike,
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<AtomicAddLiquidityAbi> {
    const factory = new ContractFactory(bytecode, _abi, wallet);

    const contract = await factory.deployContract({
      storageSlots: _storageSlots,
      ...options,
    });

    return contract as unknown as AtomicAddLiquidityAbi;
  }
}
